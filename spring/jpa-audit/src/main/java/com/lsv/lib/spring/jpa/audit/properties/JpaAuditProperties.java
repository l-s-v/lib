package com.lsv.lib.spring.jpa.audit.properties;

import com.lsv.lib.core.audit.AuditProperties;
import com.lsv.lib.core.helper.LibConstants;
import jakarta.validation.constraints.AssertFalse;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.validation.annotation.Validated;

import java.util.Set;

/**
 * Settings for observability module.
 *
 * @author Leandro da Silva Vieira
 */
@Getter
@Setter
@Accessors(fluent = false)

@Validated
@ConfigurationProperties(JpaAuditProperties.PATH)
public class JpaAuditProperties extends AuditProperties {

    public static final String PATH_DATABASE = LibConstants.BASE_LIB_PROPERTIES + "database";
    public static final String PATH = PATH_DATABASE + "." + AuditProperties.PATH;
    public static final String PROP_ENABLED_TRANSACTIONS = "enabledTransactions";
    public static final String PROP_ENABLED_MANUAL = "enabledManual";

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    /**
     * SQL command (for executeUpdate) that should be executed.
     * Will send the information collected from the application.
     * It must have a single parameter (using :p).
     */
    private String sqlCommand;
    /**
     * Whether to enable auditing for transactions where statements (sql) that modify the database
     * (insert, update and delete) are executed.
     */
    private boolean enabledTransactions;
    /**
     * Restricts the names of tables that must be audited.
     * Exactly searches for the name within the sql generated by hibernate.
     */
    private Set<String> tablesAudited;
    /**
     * Whether to enable auditing for manual calls only.
     */
    private boolean enabledManual;

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Validations

    @AssertFalse(message = "sqlCommand é obrigatório se enabled=true")
    private boolean isSqlCommandRequiredIfEnabled() {
        return isEnabled() && ObjectUtils.isEmpty(getSqlCommand());
    }

    @AssertFalse(message = "enabledManual deve ser falso se enabledTransactions=true")
    private boolean isEnabledTransactionsAndManual() {
        return this.isEnabledTransactions() && isEnabledManual();
    }
}